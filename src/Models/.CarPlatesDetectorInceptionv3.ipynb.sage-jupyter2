{"backend_state":"init","kernel":"py37ml","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"CarPlatesDetectorInceptionv3.ipynb","provenance":[]},"gpuClass":"standard","language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.0"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"07f883","input":"","metadata":{"id":"KTpAtW4afERX"},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"48a57e","input":"plt.figure(figsize=(15,30))\nimg_index=0\nfor i_car in range(0,20) :\n    plt.subplot(10,5,img_index+1)\n    ny=y_test[i_car]*255\n    image=(X_test[i_car].copy()*255).astype(np.uint8)\n    \n    image=cv2.rectangle(image,(int(ny[0]),int(ny[1])),(int(ny[2]),int(ny[3])),(0, 255, 0))\n    \n    yma,xma,ymi,xmi=int(ny[0]),int(ny[1]),int(ny[2]),int(ny[3])\n    imup=image[xmi:xma,ymi:yma,:]\n    coeff=int(image.shape[0]/(yma-ymi))\n    imup=cv2.resize(image[xmi:xma,ymi:yma,:], (image.shape[0],(xma-xmi)*coeff), interpolation = cv2.INTER_AREA)\n    vertical = np.concatenate((imup, image), axis = 0)\n    plt.imshow(vertical)\n    plt.title(f\"{i_car}\")\n    img_index=img_index+1\nplt.tight_layout()","metadata":{"id":"1Pm2z1UwfERW"},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9c5861","input":"plt.figure(figsize=(20,40))\nfor i in range(0,43) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    ny = y_cnn[i]*255\n    image=(X_unkown[i].copy()*255).astype(np.uint8)\n    image = cv2.rectangle(image,(int(ny[0]),int(ny[1])),(int(ny[2]),int(ny[3])),(0, 255, 0))\n    plt.imshow(image)","metadata":{"id":"0u9y1O42fERW"},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e34ed0","input":"from scipy.ndimage import interpolation as inter\ndef correct_skew(image, delta=1, limit=5):\n    def determine_score(arr, angle):\n        data = inter.rotate(arr, angle, reshape=False, order=0)\n        histogram = np.sum(data, axis=1)\n        score = np.sum((histogram[1:] - histogram[:-1]) ** 2)\n        return histogram, score\n\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1] \n\n    scores = []\n    angles = np.arange(-limit, limit + delta, delta)\n    for angle in angles:\n        histogram, score = determine_score(thresh, angle)\n        scores.append(score)\n\n    best_angle = angles[scores.index(max(scores))]\n\n    (h, w) = image.shape[:2]\n    center = (w // 2, h // 2)\n    M = cv2.getRotationMatrix2D(center, best_angle, 1.0)\n    rotated = cv2.warpAffine(image, M, (w, h), flags=cv2.INTER_CUBIC, \\\n              borderMode=cv2.BORDER_REPLICATE)\n    \n    return best_angle, rotated\n\nfor i_car in range(11,12):\n    img=(X_test[i_car]*255).astype(np.uint8)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    best_angle,corr_im=correct_skew(img, delta=1, limit=25)\n    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n    plt.show()\n    plt.imshow(cv2.cvtColor(corr_im, cv2.COLOR_BGR2RGB))\n    plt.show()","metadata":{"id":"LYmlzlyZfERX"},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"4ce772","input":"main_path = 'drive/MyDrive/Data_cars/'","metadata":{"id":"nNfXChg2fLKf"},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"ca9fdf","input":"X = X / 255\ny = y / 255","metadata":{"id":"yLZofgZRfERS"},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"758aa6","input":"def shuffle(matrix, target, test_proportion):\n    ratio = int(matrix.shape[0]/test_proportion) #should be int\n    X_train = matrix[ratio:,:]\n    X_test =  matrix[:ratio,:]\n    y_train = target[ratio:,:]\n    y_test =  target[:ratio,:]\n    return X_train, X_test, y_train, y_test\n\nX_train, X_test, y_train, y_test = shuffle(X, y, 5)\nX_train, X_val, y_train, y_val = shuffle(X_train, y_train, 10)","metadata":{"id":"UJ7Mlytiw6Ap"},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"0f2138","input":"logdir = \"logs/scalars/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = keras.callbacks.TensorBoard(log_dir=logdir, histogram_freq=1)\n\n\nnum_classes=4\n\n\nmodel = Sequential()\nmodel.add(InceptionV3(weights=\"imagenet\", include_top=False, input_shape=(IMAGE_SIZE, IMAGE_SIZE, 3)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(128, activation=\"sigmoid\"))\nmodel.add(Dense(64, activation=\"relu\"))\nmodel.add(Dense(num_classes, activation=\"sigmoid\"))\n\nmodel.layers[-6].trainable = False\n\nmodel.summary()\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zyMy-s7xfERT","outputId":"1b90f126-08d5-4341-e945-6ec068a07bf3"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Model: \"sequential\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n inception_v3 (Functional)   (None, 5, 5, 2048)        21802784  \n                                                                 \n flatten (Flatten)           (None, 51200)             0         \n                                                                 \n dense (Dense)               (None, 128)               6553728   \n                                                                 \n dense_1 (Dense)             (None, 128)               16512     \n                                                                 \n dense_2 (Dense)             (None, 64)                8256      \n                                                                 \n dense_3 (Dense)             (None, 4)                 260       \n                                                                 \n=================================================================\nTotal params: 28,381,540\nTrainable params: 6,578,756\nNon-trainable params: 21,802,784\n_________________________________________________________________\n"}},"pos":16,"tags":{},"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"d5a051","input":"train = model.fit(X_train, y_train, validation_data=(X_val, y_val),\n                  epochs=50, batch_size=5,\n                  verbose=1)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RTPGYu0zfERT","outputId":"0f08970f-1a3e-4548-937c-4c2bd90e9ee2"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Epoch 1/50\n751/751 [==============================] - 35s 28ms/step - loss: 0.0105 - accuracy: 0.5975 - val_loss: 0.0100 - val_accuracy: 0.6755\nEpoch 2/50\n751/751 [==============================] - 19s 26ms/step - loss: 0.0090 - accuracy: 0.6575 - val_loss: 0.0090 - val_accuracy: 0.7019\nEpoch 3/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0082 - accuracy: 0.7098 - val_loss: 0.0087 - val_accuracy: 0.7139\nEpoch 4/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0078 - accuracy: 0.7159 - val_loss: 0.0086 - val_accuracy: 0.6731\nEpoch 5/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0076 - accuracy: 0.7332 - val_loss: 0.0083 - val_accuracy: 0.7428\nEpoch 6/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0074 - accuracy: 0.7247 - val_loss: 0.0081 - val_accuracy: 0.7668\nEpoch 7/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0073 - accuracy: 0.7420 - val_loss: 0.0081 - val_accuracy: 0.7115\nEpoch 8/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0073 - accuracy: 0.7217 - val_loss: 0.0078 - val_accuracy: 0.7452\nEpoch 9/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0071 - accuracy: 0.7364 - val_loss: 0.0079 - val_accuracy: 0.7188\nEpoch 10/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0070 - accuracy: 0.7497 - val_loss: 0.0076 - val_accuracy: 0.7668\nEpoch 11/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0070 - accuracy: 0.7545 - val_loss: 0.0076 - val_accuracy: 0.7188\nEpoch 12/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0068 - accuracy: 0.7500 - val_loss: 0.0086 - val_accuracy: 0.6154\nEpoch 13/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0064 - accuracy: 0.7799 - val_loss: 0.0073 - val_accuracy: 0.7260\nEpoch 14/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0061 - accuracy: 0.7849 - val_loss: 0.0068 - val_accuracy: 0.8125\nEpoch 15/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0060 - accuracy: 0.7921 - val_loss: 0.0078 - val_accuracy: 0.8029\nEpoch 16/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0055 - accuracy: 0.8078 - val_loss: 0.0063 - val_accuracy: 0.8029\nEpoch 17/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0051 - accuracy: 0.8302 - val_loss: 0.0072 - val_accuracy: 0.7933\nEpoch 18/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0052 - accuracy: 0.8161 - val_loss: 0.0064 - val_accuracy: 0.7788\nEpoch 19/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0050 - accuracy: 0.8182 - val_loss: 0.0069 - val_accuracy: 0.7668\nEpoch 20/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0047 - accuracy: 0.8233 - val_loss: 0.0063 - val_accuracy: 0.7957\nEpoch 21/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0045 - accuracy: 0.8404 - val_loss: 0.0074 - val_accuracy: 0.7572\nEpoch 22/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0046 - accuracy: 0.8398 - val_loss: 0.0058 - val_accuracy: 0.8197\nEpoch 23/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0043 - accuracy: 0.8332 - val_loss: 0.0058 - val_accuracy: 0.8317\nEpoch 24/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0042 - accuracy: 0.8454 - val_loss: 0.0067 - val_accuracy: 0.7500\nEpoch 25/50\n751/751 [==============================] - 20s 27ms/step - loss: 0.0047 - accuracy: 0.8150 - val_loss: 0.0060 - val_accuracy: 0.8053\nEpoch 26/50\n751/751 [==============================] - 20s 27ms/step - loss: 0.0045 - accuracy: 0.8276 - val_loss: 0.0062 - val_accuracy: 0.8005\nEpoch 27/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0041 - accuracy: 0.8446 - val_loss: 0.0062 - val_accuracy: 0.8197\nEpoch 28/50\n751/751 [==============================] - 20s 27ms/step - loss: 0.0042 - accuracy: 0.8446 - val_loss: 0.0057 - val_accuracy: 0.8125\nEpoch 29/50\n751/751 [==============================] - 19s 26ms/step - loss: 0.0043 - accuracy: 0.8345 - val_loss: 0.0062 - val_accuracy: 0.7428\nEpoch 30/50\n751/751 [==============================] - 19s 26ms/step - loss: 0.0042 - accuracy: 0.8465 - val_loss: 0.0056 - val_accuracy: 0.8389\nEpoch 31/50\n751/751 [==============================] - 19s 26ms/step - loss: 0.0040 - accuracy: 0.8563 - val_loss: 0.0055 - val_accuracy: 0.8341\nEpoch 32/50\n751/751 [==============================] - 20s 27ms/step - loss: 0.0041 - accuracy: 0.8537 - val_loss: 0.0057 - val_accuracy: 0.8125\nEpoch 33/50\n751/751 [==============================] - 20s 27ms/step - loss: 0.0038 - accuracy: 0.8457 - val_loss: 0.0055 - val_accuracy: 0.8269\nEpoch 34/50\n751/751 [==============================] - 20s 27ms/step - loss: 0.0038 - accuracy: 0.8441 - val_loss: 0.0053 - val_accuracy: 0.8221\nEpoch 35/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0037 - accuracy: 0.8502 - val_loss: 0.0052 - val_accuracy: 0.8245\nEpoch 36/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0036 - accuracy: 0.8657 - val_loss: 0.0054 - val_accuracy: 0.8462\nEpoch 37/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0034 - accuracy: 0.8673 - val_loss: 0.0052 - val_accuracy: 0.8197\nEpoch 38/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0035 - accuracy: 0.8675 - val_loss: 0.0053 - val_accuracy: 0.7933\nEpoch 39/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0033 - accuracy: 0.8659 - val_loss: 0.0066 - val_accuracy: 0.7668\nEpoch 40/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0034 - accuracy: 0.8494 - val_loss: 0.0056 - val_accuracy: 0.8486\nEpoch 41/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0031 - accuracy: 0.8694 - val_loss: 0.0052 - val_accuracy: 0.8245\nEpoch 42/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0030 - accuracy: 0.8734 - val_loss: 0.0051 - val_accuracy: 0.8365\nEpoch 43/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0029 - accuracy: 0.8675 - val_loss: 0.0053 - val_accuracy: 0.8582\nEpoch 44/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0032 - accuracy: 0.8646 - val_loss: 0.0055 - val_accuracy: 0.8029\nEpoch 45/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0029 - accuracy: 0.8678 - val_loss: 0.0056 - val_accuracy: 0.8029\nEpoch 46/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0028 - accuracy: 0.8774 - val_loss: 0.0055 - val_accuracy: 0.8269\nEpoch 47/50\n751/751 [==============================] - 20s 26ms/step - loss: 0.0028 - accuracy: 0.8731 - val_loss: 0.0057 - val_accuracy: 0.8221\nEpoch 48/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0030 - accuracy: 0.8697 - val_loss: 0.0062 - val_accuracy: 0.8173\nEpoch 49/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0029 - accuracy: 0.8785 - val_loss: 0.0054 - val_accuracy: 0.8365\nEpoch 50/50\n751/751 [==============================] - 19s 25ms/step - loss: 0.0027 - accuracy: 0.8774 - val_loss: 0.0054 - val_accuracy: 0.8341\n"}},"pos":18,"tags":{},"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"350193","input":"from google.colab import drive\ndrive.mount('/content/drive')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nh_RwRawfO-H","outputId":"ccf90a75-fda1-48a6-987a-5107f8592580"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"1446c6","input":"img_dir = \"../images/\"\nxml_dir = img_dir\ndata_path = os.path.join(img_dir,'*jpg')\nfiles = glob.glob(data_path)\nfiles.sort()\n\nX_unkown=[]\nfor f in tqdm(files):\n    img = cv2.imread(f)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize(img, (IMAGE_SIZE,IMAGE_SIZE))\n    X_unkown.append(np.array(img))\n\nX_unkown=np.array(X_unkown)\nX_unkown = X_unkown / 255\ny_cnn = model.predict(X_unkown)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":396},"id":"Fxm8DgfzfERW","outputId":"64e54271-1d24-4bc2-f13c-42cfea511685"},"output":{"0":{"name":"stderr","output_type":"stream","text":"0it [00:00, ?it/s]\n"},"1":{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-1d2d46198ad4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mX_unkown\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_unkown\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mX_unkown\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_unkown\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m255\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0my_cnn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_unkown\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1995\u001b[0m             \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_predict_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend_step\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'outputs'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbatch_outputs\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1996\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mbatch_outputs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1997\u001b[0;31m         raise ValueError('Unexpected result of `predict_function` '\n\u001b[0m\u001b[1;32m   1998\u001b[0m                          \u001b[0;34m'(Empty batch_outputs). Please use '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1999\u001b[0m                          \u001b[0;34m'`Model.compile(..., run_eagerly=True)`, or '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Unexpected result of `predict_function` (Empty batch_outputs). Please use `Model.compile(..., run_eagerly=True)`, or `tf.config.run_functions_eagerly(True)` for more information of where went wrong, or file a issue/bug to `tf.keras`."]}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"94c501","input":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7vr1esiZfERU","outputId":"ebd0daa5-7416-45da-cf29-870b841b872b"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Score : 84.44%\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"1ca2a7","input":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","metadata":{"id":"4lN_HgHrfERU"},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"c5cb5a","input":"plot_scores(train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"gyxuNASDfERU","outputId":"8cc4fdfd-4b2d-4d1f-f578-282150d8e31f"},"output":{"0":{"data":{"image/png":"0fa37fc8b08c86fba046637354100be22074538a","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":23,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"207665","input":"test_loss, test_accuracy = model.evaluate(X_test, y_test,steps=int(20))\nprint(\"Test results \\n Loss:\",test_loss,'\\n Accuracy',test_accuracy)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y07VBj1xfERV","outputId":"5069bf03-d2bc-4f70-e8b1-2984414c6c9b"},"output":{"0":{"name":"stdout","output_type":"stream","text":"20/20 [==============================] - 2s 120ms/step - loss: 0.0057 - accuracy: 0.8444\nTest results \n Loss: 0.005703671369701624 \n Accuracy 0.8443803787231445\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"d85a16","input":"y_cnn = model.predict(X_test)","metadata":{"id":"zKLlVvKwfERV"},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"3a08ce","input":"plt.figure(figsize=(20,40))\nfor i in range(0,40) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    ny = y_cnn[i]*255\n    image=(X_test[i].copy()*255).astype(np.uint8)\n    image = cv2.rectangle(image,(int(ny[0]),int(ny[1])),(int(ny[2]),int(ny[3])),(0, 255, 0))\n    plt.title(f\"{i}\")\n    plt.imshow(image)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"XhFq4iqAfERV","outputId":"57fbc5c8-ca9d-461e-ead8-60dbd32b237e"},"output":{"0":{"data":{"image/png":"7af5fad4edcfc55a9b4eaffed7ca45a9a3d45d3d","text/plain":"<Figure size 1440x2880 with 40 Axes>"},"exec_count":26,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":26,"tags":{},"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"1a9cbf","input":"import os\nimport zipfile\nif not \"data\" in os.listdir(main_path):\n  with zipfile.ZipFile(main_path+\"data.zip\", 'r') as zip_ref:\n      zip_ref.extractall(main_path)","metadata":{"id":"fj9pYaRhfqAj"},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"05e7cb","input":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom tqdm import tqdm\nimport cv2\nimport os\nimport glob\nfrom lxml import etree\nimport random\n\n\nfrom datetime import datetime\n\nimport tensorflow as tf\nfrom tensorflow import keras\nimport tensorflow_hub as hub\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications.resnet50 import ResNet50\n\nfrom tensorflow.keras.applications import MobileNetV2, InceptionV3, InceptionResNetV2\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Input\nfrom tensorflow.keras.models import Model\nfrom keras.applications.imagenet_utils import preprocess_input","metadata":{"id":"cgDG4PXvfERN"},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"602686","input":"IMAGE_SIZE = 224\nrandom.seed(4)\n# old case\nimg_dir = main_path + 'data'\nxml_dir = img_dir\n# new case\nimg_dir = main_path + 'data/Label_image_800/'\nxml_dir = main_path + 'data/Label_xml_800/'\ndata_path = os.path.join(img_dir,'*jpg')\nlabels_path=os.path.join(xml_dir,'*xml')\n","metadata":{"id":"aJHxe-tifERO"},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"b7cf6f","input":"def resize_one_label(f):\n    tree = etree.parse(f)\n    for dim in tree.xpath(\"size\"):\n        width = int(dim.xpath(\"width\")[0].text)\n        height = int(dim.xpath(\"height\")[0].text)\n    for dim in tree.xpath(\"object/bndbox\"):\n        xmin = int(dim.xpath(\"xmin\")[0].text)/(width/IMAGE_SIZE)\n        ymin = int(dim.xpath(\"ymin\")[0].text)/(height/IMAGE_SIZE)\n        xmax = int(dim.xpath(\"xmax\")[0].text)/(width/IMAGE_SIZE)\n        ymax = int(dim.xpath(\"ymax\")[0].text)/(height/IMAGE_SIZE)\n    return [int(xmax), int(ymax), int(xmin), int(ymin)]\n\n\nfiles = glob.glob(data_path)\nfiles.sort()\n#files=random.sample(files, 100)\nX=[]\ny=[]\nfor f in tqdm(files):\n    img = cv2.imread(f)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    # Preprocess images\n    \n    #img_transf = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n    #img_transf[:,:,2] = cv2.equalizeHist(img_transf[:,:,2])\n    #img = cv2.cvtColor(img_transf, cv2.COLOR_HSV2RGB)\n    #########################\n    img = cv2.resize(img, (IMAGE_SIZE,IMAGE_SIZE))\n    img = preprocess_input(img)\n    X.append(np.array(img))\n    # load labels\n    fxml=xml_dir+(os.path.basename(f).split(\"jpg\"))[0]+\"xml\"\n    y.append(resize_one_label(fxml))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zBal81blfERP","outputId":"77713911-02cd-4df4-a00a-b61566dc177a"},"output":{"0":{"name":"stderr","output_type":"stream","text":"100%|██████████| 5209/5209 [01:52<00:00, 46.11it/s]\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"0594e7","input":"X=np.array(X)\ny=np.array(y)","metadata":{"id":"LywnIhfIfERQ"},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"09063b","input":"X.shape,y.shape","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kBQlbXyhfERR","outputId":"f742fdf5-1157-4e66-e5ca-27f9fa706cdc"},"output":{"0":{"data":{"text/plain":"((5209, 224, 224, 3), (5209, 4))"},"exec_count":8,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"0e6ba4","input":"# plt.figure(figsize=(15,30))\n# for i_car in range(0,20) :\n#     plt.subplot(10,5,i_car+1)\n#     plt.axis('off')\n#     image=X[i_car].copy()\n#     image = cv2.rectangle(image,(y[i_car][0],y[i_car][1]),(y[i_car][2],y[i_car][3]),(0, 255, 0),2)\n#     plt.title(f\"{i_car}\")\n#     plt.imshow(image)","metadata":{"id":"pat7h9pDfERR"},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"08808c","input":"# Test","metadata":{"id":"XoDi9x-xfERU"},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"13aa6a","input":"# Normalize!!!\n* coordinates [0,1]\n* colorspace  [0,1]","metadata":{"id":"kdCdfFCkfERS"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"1891da","input":"# Detecting Car plates\n* Load images\n* load labels VOC format\n* scaleup \n* train \n* test","metadata":{"id":"ZdKrr2I-fERK"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"1db2ca","input":"# Data augmentation\n* https://www.tensorflow.org/tutorials/images/data_augmentation","metadata":{"id":"TISB14MqfERX"},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"252dcb","input":"# Detection","metadata":{"id":"AdXxZcL1fERV"},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"4f3207","input":"# Test on seen data","metadata":{"id":"tCNehM6PfERW"},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"5701d0","input":"# Constants","metadata":{"id":"kZr5oKtcfERO"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"576709","input":"# Build the CNN based on transfer learning technique","metadata":{"id":"ZHoLtwNjfERT"},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"763c2a","input":"## What about data quality and orientation?","metadata":{"id":"RkugYBQ-fERX"},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"8e018b","input":"# Analyze the problem","metadata":{"id":"VByHo_r8fERW"},"pos":31,"type":"cell"}
{"cell_type":"markdown","id":"a2b1d0","input":"# Load and Prepare data","metadata":{"id":"oymWWxQefERP"},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"b2ecd9","input":"# Train model ","metadata":{"id":"4jkt_biXfERT"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"ffe5b3","input":"## Load unknown data\n","metadata":{"id":"yZSGjnIwfERW"},"pos":28,"type":"cell"}
{"id":0,"time":1664731037505,"type":"user"}
{"last_load":1664731037225,"type":"file"}