{"backend_state":"init","kernel":"py37ml","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"CarPlatesDetectorVGG16_drive.ipynb","provenance":[]},"gpuClass":"standard","language_info":{"name":"python"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"87738e","input":"plt.figure(figsize=(20,40))\nfor i in range(0,43) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    ny = y_cnn[i]*255\n    image=(X_unkown[i].copy()*255).astype(np.uint8)\n    image = cv2.rectangle(image,(int(ny[0]),int(ny[1])),(int(ny[2]),int(ny[3])),(0, 255, 0))\n    plt.imshow(image)","metadata":{"id":"9od3Ljn79HB_"},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a32da0","input":"from scipy.ndimage import interpolation as inter\ndef correct_skew(image, delta=1, limit=5):\n    def determine_score(arr, angle):\n        data = inter.rotate(arr, angle, reshape=False, order=0)\n        histogram = np.sum(data, axis=1)\n        score = np.sum((histogram[1:] - histogram[:-1]) ** 2)\n        return histogram, score\n\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1] \n\n    scores = []\n    angles = np.arange(-limit, limit + delta, delta)\n    for angle in angles:\n        histogram, score = determine_score(thresh, angle)\n        scores.append(score)\n\n    best_angle = angles[scores.index(max(scores))]\n\n    (h, w) = image.shape[:2]\n    center = (w // 2, h // 2)\n    M = cv2.getRotationMatrix2D(center, best_angle, 1.0)\n    rotated = cv2.warpAffine(image, M, (w, h), flags=cv2.INTER_CUBIC, \\\n              borderMode=cv2.BORDER_REPLICATE)\n    \n    return best_angle, rotated\n\nfor i_car in range(11,12):\n    img=(X_test[i_car]*255).astype(np.uint8)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    best_angle,corr_im=correct_skew(img, delta=1, limit=25)\n    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n    plt.show()\n    plt.imshow(cv2.cvtColor(corr_im, cv2.COLOR_BGR2RGB))\n    plt.show()","metadata":{"id":"tK_-vMTG9HCB"},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c2c756","input":"img_dir = \"../images/\"\nxml_dir = img_dir\ndata_path = os.path.join(img_dir,'*jpg')\nfiles = glob.glob(data_path)\nfiles.sort()\n\nX_unkown=[]\nfor f in tqdm(files):\n    img = cv2.imread(f)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize(img, (IMAGE_SIZE,IMAGE_SIZE))\n    X_unkown.append(np.array(img))\n\nX_unkown=np.array(X_unkown)\nX_unkown = X_unkown / 255\ny_cnn = model.predict(X_unkown)","metadata":{"id":"skzlCq7D9HB_"},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d9b33d","input":"","metadata":{"id":"F2OcAVxM9HCC"},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e85dfd","input":"plt.figure(figsize=(15,30))\nimg_index=0\nfor i_car in range(0,20) :\n    plt.subplot(10,5,img_index+1)\n    ny=y_test[i_car]*255\n    image=(X_test[i_car].copy()*255).astype(np.uint8)\n    \n    image=cv2.rectangle(image,(int(ny[0]),int(ny[1])),(int(ny[2]),int(ny[3])),(0, 255, 0))\n    \n    yma,xma,ymi,xmi=int(ny[0]),int(ny[1]),int(ny[2]),int(ny[3])\n    imup=image[xmi:xma,ymi:yma,:]\n    coeff=int(image.shape[0]/(yma-ymi))\n    imup=cv2.resize(image[xmi:xma,ymi:yma,:], (image.shape[0],(xma-xmi)*coeff), interpolation = cv2.INTER_AREA)\n    vertical = np.concatenate((imup, image), axis = 0)\n    plt.imshow(vertical)\n    plt.title(f\"{i_car}\")\n    img_index=img_index+1\nplt.tight_layout()","metadata":{"id":"kObSbse29HCA"},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"606661","input":"from google.colab import drive\ndrive.mount('/content/drive')","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AKEi7xzy9Mbc","outputId":"f992a028-a872-4b7e-a507-71d6b9b7dd76"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"15478d","input":"# plt.figure(figsize=(16,10))\n# for i_car in range(0,20) :\n#     plt.subplot(10,3,i_car+1)\n#     plt.axis('off')\n#     image=X[i_car].copy()\n#     lab = y[i_car]\n#     image = cv2.rectangle(image,(lab[0],lab[1]),(lab[2],lab[3]),(0, 255, 0),2)\n#     plt.title(f\"{i_car}\")\n#     plt.imshow(image)","metadata":{"id":"7kxWzn7q9HB0"},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"87b7bf","input":"X = X / 255\ny = np.divide(y, 255)","metadata":{"id":"BPlSW1dA9HB2"},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"b01ccc","input":"def shuffle(matrix, target, test_proportion):\n    ratio = int(matrix.shape[0]/test_proportion) #should be int\n    X_train = matrix[ratio:,:]\n    X_test =  matrix[:ratio,:]\n    Y_train = target[ratio:,:]\n    Y_test =  target[:ratio,:]\n    return X_train, X_test, Y_train, Y_test\n\nX_train, X_test, y_train, y_test = shuffle(X, y, 5)\nX_train, X_val, y_train, y_val = shuffle(X_train, y_train, 10)","metadata":{"id":"tTMzBHQ-rMw2"},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"eb220e","input":"# from sklearn.model_selection import train_test_split\n# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=1)","metadata":{"id":"G1jEGWgi9HB3"},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"ee3a29","input":"logdir = main_path + \"logs/scalars/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = keras.callbacks.TensorBoard(log_dir=logdir, histogram_freq=1)\n\n\nnum_classes=4\n\n\nmodel = Sequential()\nmodel.add(InceptionResNetV2(weights=\"imagenet\", include_top=False, input_shape=(IMAGE_SIZE, IMAGE_SIZE, 3)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(128, activation=\"sigmoid\"))\nmodel.add(Dense(64, activation=\"relu\"))\nmodel.add(Dense(num_classes, activation=\"sigmoid\"))\n\nmodel.layers[-6].trainable = False\n\nmodel.summary()\nmodel.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZlW4m5dQ9HB4","outputId":"455e4034-8623-43f7-a519-74dafb978f19"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Model: \"sequential\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n inception_resnet_v2 (Functi  (None, 5, 5, 1536)       54336736  \n onal)                                                           \n                                                                 \n flatten (Flatten)           (None, 38400)             0         \n                                                                 \n dense (Dense)               (None, 128)               4915328   \n                                                                 \n dense_1 (Dense)             (None, 128)               16512     \n                                                                 \n dense_2 (Dense)             (None, 64)                8256      \n                                                                 \n dense_3 (Dense)             (None, 4)                 260       \n                                                                 \n=================================================================\nTotal params: 59,277,092\nTrainable params: 4,940,356\nNon-trainable params: 54,336,736\n_________________________________________________________________\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"ad8fc8","input":"train = model.fit(X_train, y_train, validation_data=(X_val, y_val),\n                  epochs=50, batch_size=5,\n                  verbose=1)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PM6StiA29HB5","outputId":"eedfbf7e-a375-480b-bb2d-ecd294453d54"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Epoch 1/50\n751/751 [==============================] - 65s 59ms/step - loss: 0.0080 - accuracy: 0.6874 - val_loss: 0.0068 - val_accuracy: 0.6995\nEpoch 2/50\n751/751 [==============================] - 41s 54ms/step - loss: 0.0067 - accuracy: 0.7433 - val_loss: 0.0055 - val_accuracy: 0.7644\nEpoch 3/50\n751/751 [==============================] - 42s 55ms/step - loss: 0.0055 - accuracy: 0.7775 - val_loss: 0.0051 - val_accuracy: 0.7692\nEpoch 4/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0048 - accuracy: 0.8137 - val_loss: 0.0054 - val_accuracy: 0.8029\nEpoch 5/50\n751/751 [==============================] - 43s 57ms/step - loss: 0.0049 - accuracy: 0.8033 - val_loss: 0.0042 - val_accuracy: 0.8245\nEpoch 6/50\n751/751 [==============================] - 43s 57ms/step - loss: 0.0044 - accuracy: 0.8228 - val_loss: 0.0040 - val_accuracy: 0.8149\nEpoch 7/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0044 - accuracy: 0.8249 - val_loss: 0.0040 - val_accuracy: 0.8317\nEpoch 8/50\n751/751 [==============================] - 42s 55ms/step - loss: 0.0042 - accuracy: 0.8398 - val_loss: 0.0041 - val_accuracy: 0.8101\nEpoch 9/50\n751/751 [==============================] - 43s 57ms/step - loss: 0.0040 - accuracy: 0.8284 - val_loss: 0.0039 - val_accuracy: 0.8389\nEpoch 10/50\n751/751 [==============================] - 42s 56ms/step - loss: 0.0037 - accuracy: 0.8483 - val_loss: 0.0040 - val_accuracy: 0.7885\nEpoch 11/50\n751/751 [==============================] - 43s 57ms/step - loss: 0.0037 - accuracy: 0.8441 - val_loss: 0.0042 - val_accuracy: 0.8389\nEpoch 12/50\n751/751 [==============================] - 41s 54ms/step - loss: 0.0034 - accuracy: 0.8475 - val_loss: 0.0033 - val_accuracy: 0.8582\nEpoch 13/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0033 - accuracy: 0.8502 - val_loss: 0.0035 - val_accuracy: 0.8365\nEpoch 14/50\n751/751 [==============================] - 42s 56ms/step - loss: 0.0030 - accuracy: 0.8673 - val_loss: 0.0034 - val_accuracy: 0.8558\nEpoch 15/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0029 - accuracy: 0.8617 - val_loss: 0.0031 - val_accuracy: 0.8606\nEpoch 16/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0028 - accuracy: 0.8633 - val_loss: 0.0033 - val_accuracy: 0.8558\nEpoch 17/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0028 - accuracy: 0.8774 - val_loss: 0.0027 - val_accuracy: 0.8678\nEpoch 18/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0028 - accuracy: 0.8723 - val_loss: 0.0029 - val_accuracy: 0.8990\nEpoch 19/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0028 - accuracy: 0.8793 - val_loss: 0.0027 - val_accuracy: 0.8798\nEpoch 20/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0025 - accuracy: 0.8731 - val_loss: 0.0030 - val_accuracy: 0.8606\nEpoch 21/50\n751/751 [==============================] - 41s 54ms/step - loss: 0.0023 - accuracy: 0.8822 - val_loss: 0.0028 - val_accuracy: 0.8870\nEpoch 22/50\n751/751 [==============================] - 41s 54ms/step - loss: 0.0023 - accuracy: 0.8881 - val_loss: 0.0028 - val_accuracy: 0.8630\nEpoch 23/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0023 - accuracy: 0.8899 - val_loss: 0.0027 - val_accuracy: 0.8774\nEpoch 24/50\n751/751 [==============================] - 41s 54ms/step - loss: 0.0022 - accuracy: 0.8798 - val_loss: 0.0030 - val_accuracy: 0.8582\nEpoch 25/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0020 - accuracy: 0.8907 - val_loss: 0.0026 - val_accuracy: 0.8918\nEpoch 26/50\n751/751 [==============================] - 41s 54ms/step - loss: 0.0020 - accuracy: 0.8902 - val_loss: 0.0029 - val_accuracy: 0.8726\nEpoch 27/50\n751/751 [==============================] - 42s 57ms/step - loss: 0.0020 - accuracy: 0.8937 - val_loss: 0.0027 - val_accuracy: 0.8678\nEpoch 28/50\n751/751 [==============================] - 41s 54ms/step - loss: 0.0020 - accuracy: 0.8822 - val_loss: 0.0024 - val_accuracy: 0.8918\nEpoch 29/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0018 - accuracy: 0.8862 - val_loss: 0.0024 - val_accuracy: 0.8846\nEpoch 30/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0019 - accuracy: 0.8838 - val_loss: 0.0028 - val_accuracy: 0.8774\nEpoch 31/50\n751/751 [==============================] - 42s 56ms/step - loss: 0.0018 - accuracy: 0.8987 - val_loss: 0.0026 - val_accuracy: 0.8654\nEpoch 32/50\n751/751 [==============================] - 41s 54ms/step - loss: 0.0017 - accuracy: 0.8875 - val_loss: 0.0026 - val_accuracy: 0.8606\nEpoch 33/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0020 - accuracy: 0.8825 - val_loss: 0.0025 - val_accuracy: 0.8726\nEpoch 34/50\n751/751 [==============================] - 42s 56ms/step - loss: 0.0017 - accuracy: 0.8979 - val_loss: 0.0023 - val_accuracy: 0.8822\nEpoch 35/50\n751/751 [==============================] - 42s 56ms/step - loss: 0.0016 - accuracy: 0.8910 - val_loss: 0.0025 - val_accuracy: 0.8822\nEpoch 36/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0016 - accuracy: 0.8942 - val_loss: 0.0027 - val_accuracy: 0.8702\nEpoch 37/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0016 - accuracy: 0.8921 - val_loss: 0.0027 - val_accuracy: 0.8750\nEpoch 38/50\n751/751 [==============================] - 43s 57ms/step - loss: 0.0015 - accuracy: 0.9001 - val_loss: 0.0024 - val_accuracy: 0.8798\nEpoch 39/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0014 - accuracy: 0.9038 - val_loss: 0.0023 - val_accuracy: 0.8942\nEpoch 40/50\n751/751 [==============================] - 42s 56ms/step - loss: 0.0015 - accuracy: 0.8966 - val_loss: 0.0023 - val_accuracy: 0.8798\nEpoch 41/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0014 - accuracy: 0.9104 - val_loss: 0.0023 - val_accuracy: 0.8750\nEpoch 42/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0015 - accuracy: 0.9062 - val_loss: 0.0028 - val_accuracy: 0.8654\nEpoch 43/50\n751/751 [==============================] - 42s 56ms/step - loss: 0.0014 - accuracy: 0.8947 - val_loss: 0.0024 - val_accuracy: 0.8774\nEpoch 44/50\n751/751 [==============================] - 43s 57ms/step - loss: 0.0015 - accuracy: 0.8985 - val_loss: 0.0025 - val_accuracy: 0.8726\nEpoch 45/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0014 - accuracy: 0.9019 - val_loss: 0.0023 - val_accuracy: 0.8990\nEpoch 46/50\n751/751 [==============================] - 42s 55ms/step - loss: 0.0014 - accuracy: 0.9014 - val_loss: 0.0025 - val_accuracy: 0.8630\nEpoch 47/50\n751/751 [==============================] - 42s 56ms/step - loss: 0.0014 - accuracy: 0.9075 - val_loss: 0.0026 - val_accuracy: 0.8630\nEpoch 48/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0013 - accuracy: 0.8995 - val_loss: 0.0021 - val_accuracy: 0.8798\nEpoch 49/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0013 - accuracy: 0.9120 - val_loss: 0.0022 - val_accuracy: 0.8702\nEpoch 50/50\n751/751 [==============================] - 41s 55ms/step - loss: 0.0012 - accuracy: 0.9104 - val_loss: 0.0025 - val_accuracy: 0.8606\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"da1343","input":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xm9qB-n29HB6","outputId":"4faca202-a506-4de4-a9ae-97fa9ed1b300"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Score : 85.30%\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"90e633","input":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","metadata":{"id":"7trbTpx19HB6"},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"3c0506","input":"plot_scores(train)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"C-nyEI5g9HB7","outputId":"2603c455-6db0-4de8-ce2d-48930bfe4d98"},"output":{"0":{"data":{"image/png":"49318966b77e965ead1040a34fd52438cf7bf914","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":18,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"cc9008","input":"test_loss, test_accuracy = model.evaluate(X_test, y_test,steps=int(20))\nprint(\"Test results \\n Loss:\",test_loss,'\\n Accuracy',test_accuracy)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sf21lgby9HB8","outputId":"abec9837-308e-414e-b294-9820cb75f311"},"output":{"0":{"name":"stdout","output_type":"stream","text":"20/20 [==============================] - 9s 347ms/step - loss: 0.0025 - accuracy: 0.8530\nTest results \n Loss: 0.002491061808541417 \n Accuracy 0.8530259132385254\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"689451","input":"main_path = \"/content/drive/MyDrive/CarPlatesDetector/\"","metadata":{"id":"wFq-9VV69ZPM"},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"191f2b","input":"y_cnn = model.predict(X_test)","metadata":{"id":"RqQve-LT9HB9"},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"fc3184","input":"plt.figure(figsize=(20,40))\nfor i in range(0,20) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    ny = y_cnn[i]*255\n    image=(X_test[i].copy()*255).astype(np.uint8)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image += 127\n    image = cv2.rectangle(image,(int(ny[0]),int(ny[1])),(int(ny[2]),int(ny[3])),(0, 255, 0))\n    plt.title(f\"{i}\")\n    plt.imshow(image)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":895},"id":"rP24CoQf9HB-","outputId":"875a46b3-643d-44b8-bb40-c25f50aa032f"},"output":{"0":{"data":{"image/png":"0988b61e7adc0728b2620427bf51c445ed307180","text/plain":"<Figure size 1440x2880 with 20 Axes>"},"exec_count":24,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"61271e","input":"import zipfile\nimport os\nif not \"new_data\" in os.listdir(main_path):\n  with zipfile.ZipFile(main_path + \"new_data.zip\", 'r') as zip_ref:\n      zip_ref.extractall(main_path)\n\nif not \"old_data\" in os.listdir(main_path):\n  with zipfile.ZipFile(main_path + \"old_data.zip\", 'r') as zip_ref:\n      zip_ref.extractall(main_path)","metadata":{"id":"kkKuymFX9RcM"},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"9002f9","input":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom tqdm import tqdm\nimport cv2\nimport os\nimport glob\nfrom lxml import etree\nimport random\n\n\nfrom datetime import datetime\n\nimport tensorflow as tf\nfrom tensorflow import keras\nimport tensorflow_hub as hub\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg19 import VGG19\nfrom tensorflow.keras.applications.resnet50 import ResNet50\n\nfrom tensorflow.keras.applications import MobileNetV2, InceptionV3, InceptionResNetV2\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Input\nfrom tensorflow.keras.models import Model\nfrom keras.applications.imagenet_utils import preprocess_input","metadata":{"id":"3BM-27dA9HBq"},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"c74a90","input":"IMAGE_SIZE = 224\nrandom.seed(4)\n# old case\nimg_dir = main_path + \"old_data/result_images_512/\"\nxml_dir = main_path + \"old_data/Plate_xml_512/\"\n# new case\nimg_dir = main_path + \"new_data/Label_image_800/\"\nxml_dir = main_path + \"new_data/Label_xml_800/\"\ndata_path = os.path.join(img_dir,'*jpg')\nlabels_path=os.path.join(xml_dir,'*xml')\n","metadata":{"id":"jvqQEEZY9HBt"},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"08cebb","input":"# import os\n# images = os.listdir(main_path + \"data/Label_image_800\")\n# xmls = os.listdir(main_path + \"data/Label_xml_800\")\n# img_names = []\n# xml_names = []\n# for name in images:\n#   img_names.append(name.split(\".\")[0])\n# for name in xmls:\n#   xml_names.append(name.split(\".\")[0])\n# for i in img_names:\n#   if not i in xml_names:\n#     print(i + \".jpg\")\n# for i in xml_names:\n#   if not i in img_names:\n#     print(i + \".xml\")","metadata":{"id":"uu82LFmYBdJk"},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"d17b66","input":"def resize_one_label(f):\n    tree = etree.parse(f)\n    for dim in tree.xpath(\"size\"):\n        width = int(dim.xpath(\"width\")[0].text)\n        height = int(dim.xpath(\"height\")[0].text)\n    for dim in tree.xpath(\"object/bndbox\"):\n        xmin = int(dim.xpath(\"xmin\")[0].text)/(width/IMAGE_SIZE)\n        ymin = int(dim.xpath(\"ymin\")[0].text)/(height/IMAGE_SIZE)\n        xmax = int(dim.xpath(\"xmax\")[0].text)/(width/IMAGE_SIZE)\n        ymax = int(dim.xpath(\"ymax\")[0].text)/(height/IMAGE_SIZE)\n        return [int(xmax), int(ymax), int(xmin), int(ymin)]\n\ndef resize_labels(f):\n    tree = etree.parse(f)\n    result = []\n    for dim in tree.xpath(\"size\"):\n        width = int(dim.xpath(\"width\")[0].text)\n        height = int(dim.xpath(\"height\")[0].text)\n    for dim in tree.xpath(\"object/bndbox\"):\n        xmin = int(dim.xpath(\"xmin\")[0].text)/(width/IMAGE_SIZE)\n        ymin = int(dim.xpath(\"ymin\")[0].text)/(height/IMAGE_SIZE)\n        xmax = int(dim.xpath(\"xmax\")[0].text)/(width/IMAGE_SIZE)\n        ymax = int(dim.xpath(\"ymax\")[0].text)/(height/IMAGE_SIZE)\n        result.append(np.array([int(xmax), int(ymax), int(xmin), int(ymin)]))\n    return np.array(result)\n\nfiles = glob.glob(data_path)\nfiles.sort()\n#files=random.sample(files, 100)\nX=[]\ny=[]\nfor f in tqdm(files):\n    img = cv2.imread(f)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = preprocess_input(img)\n    # img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n    # Preprocess images\n    \n    # img_transf = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)\n    # img_transf[:,:,2] = cv2.equalizeHist(img_transf[:,:,2])\n    # img = cv2.cvtColor(img_transf, cv2.COLOR_HSV2RGB)\n    # #########################\n    img = cv2.resize(img, (IMAGE_SIZE,IMAGE_SIZE))\n    X.append(np.array(img))\n    # load labels\n    fxml=xml_dir+(os.path.basename(f).split(\"jpg\"))[0]+\"xml\"\n    # y.append(resize_one_label(fxml))\n    y.append(resize_one_label(fxml))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3-JSma7t9HBv","outputId":"0c37040f-b06c-4901-c189-f72eea0bc6de"},"output":{"0":{"name":"stderr","output_type":"stream","text":"100%|██████████| 5209/5209 [02:00<00:00, 43.14it/s]\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"92a1b8","input":"X=np.array(X)\ny=np.array(y)","metadata":{"id":"jEg2uWfd9HBy"},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"a985ba","input":"X.shape,y.shape","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1xRwTs4J9HBz","outputId":"6bfb0ce0-46a7-448c-a78e-6d8d1354cf32"},"output":{"0":{"data":{"text/plain":"((5209, 224, 224, 3), (5209, 4))"},"exec_count":9,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"markdown","id":"0ad5c8","input":"# Detecting Car plates\n* Load images\n* load labels VOC format\n* scaleup \n* train \n* test","metadata":{"id":"lmEAUH6h9HBj"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"0e370e","input":"# Test","metadata":{"id":"rsxioGZt9HB6"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"172e9a","input":"# Build the CNN based on transfer learning technique","metadata":{"id":"sU3uSA9P9HB3"},"pos":17,"type":"cell"}
{"cell_type":"markdown","id":"2388c1","input":"# Load and Prepare data","metadata":{"id":"XKR8tpwX9HBu"},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"43295c","input":"# Data augmentation\n* https://www.tensorflow.org/tutorials/images/data_augmentation","metadata":{"id":"BXBH2lcG9HCC"},"pos":37,"type":"cell"}
{"cell_type":"markdown","id":"53a3dc","input":"# Test on seen data","metadata":{"id":"tFFFnQTw9HB-"},"pos":29,"type":"cell"}
{"cell_type":"markdown","id":"5f265d","input":"## Load unknown data\n","metadata":{"id":"n8e1nIfu9HB_"},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"774bb4","input":"## What about data quality and orientation?","metadata":{"id":"U85OZIVg9HCB"},"pos":35,"type":"cell"}
{"cell_type":"markdown","id":"9b2cc5","input":"# Constants","metadata":{"id":"gjLXpP6s9HBt"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"b273de","input":"# Normalize!!!\n* coordinates [0,1]\n* colorspace  [0,1]","metadata":{"id":"zf0n8JHU9HB1"},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"b71b70","input":"# Analyze the problem","metadata":{"id":"uoygz4ej9HCA"},"pos":33,"type":"cell"}
{"cell_type":"markdown","id":"c8c2c5","input":"# Train model ","metadata":{"id":"akNmFGgb9HB5"},"pos":19,"type":"cell"}
{"cell_type":"markdown","id":"d9feb8","input":"# Detection","metadata":{"id":"h349q8Di9HB8"},"pos":26,"type":"cell"}
{"id":0,"time":1665388507239,"type":"user"}
{"last_load":1665388508668,"type":"file"}